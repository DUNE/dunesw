#include "opticaldetectormodules_dune.fcl"
#include "Deconvolution.fcl"
#include "OpHitFinderDeco.fcl"
#include "OpSlicer.fcl"

#include "t0reco.fcl"
#include "pandoramodules_dune.fcl"
#include "wirecell_dune.fcl"
#include "particleid.fcl"

#include "CRT.fcl"
#include "T0RecoAnodePiercers.fcl"
#
#include "numberofhitsfilter.fcl"
#include "SpacePointSolver_dune.fcl"
#include "featurelabelingmodules.fcl"
#include "calorimetry_pdune.fcl"
#include "calibration_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "PDHDFEMBFilter.fcl"

#include "services_dune.fcl"
#include "spacecharge_dune.fcl"
#include "dune_calibanatree.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_protodunehd_hist.root" }
  TimeTracker:       @local::dune_time_tracker
  MemoryTracker:     @local::dune_memory_tracker
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        #@table::protodunehd_reco_services
  ChannelStatusService: @local::dunefd_channel_status
  WireReadout:          @local::dune_wire_readout
  GeometryConfigurationWriter:  {}
  Geometry:                     @local::protodunehdv6_geo
  DetectorClocksService:        @local::protodunehd_detectorclocks
  DetectorPropertiesService:    @local::protodunehd_detproperties
  LArPropertiesService:         @local::dunefd_properties
  LArFFT:                       @local::dunefd_larfft
  DatabaseUtil:                 @local::dunefd_database
  BackTrackerService:           @local::pdsp_backtrackerservice
  ParticleInventoryService:     @local::dunefd_particleinventoryservice
  PhotonBackTrackerService:     @local::dunefd_photonbacktrackerservice_legacy
  SpaceCharge:                  @local::pdhd_spacecharge


  IFDH: {}


}

services.AuxDetGeometry.GDML: "protodunehd_v6_refactored.gdml"
services.AuxDetGeometry.Name: "protodunehdv6"

#BackTracker Module labels
services.BackTrackerService.BackTracker.G4ModuleLabel: "largeant"
services.BackTrackerService.BackTracker.SimChannelModuleLabel: "tpcrawdecoder:simpleSC"

#source is now a root file

source:
{
  module_type: RootInput
  maxEvents: -1
  saveMemoryObjectThreshold: 0
  fileNames: ["detsim_single_protodunehd.root"]
}
# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.

# Modules are grouped by type.

physics: {
  filters: {
    nhitsfilter: @local::pdhd_nhitsfilter
  }

  producers: {
    wclsdatahd:         @local::protodunehd_nfsp_mc
    # Hit finder
    gaushit:            @local::protodunespmc_gaushitfinder
    # space point solver
    reco3d:             @local::pdhd_mc_spacepointsolver
    # actual disambiguation
    hitpdune:           @local::pdune_disambigfromsp
    # event feature labeling
    emtrkmichelid:      @local::pdhd_mc_emtrkmichelid
    # reconstruction using disambiguated hits
    pandora:            @local::protodunehd_pandora
    pandoraWriter:      @local::dune_pandorawriter
    pandoraTrack:       @local::dune_pandoraTrackCreation
    pandoraShower:      @local::dune_pandoraShowerCreation

    ## Standard/Old PDSP style Calorimetry
    pandoracalo:        @local::pdhd_calomcsce
    pandoracalonosce:   @local::pdhd_calomcnosce
    pandorapid:         @local::standard_chi2pid
    pandoraShowercalo:       @local::pdhd_showercalomcsce
    pandoraShowercalonosce:  @local::pdhd_showercalomcnosce

    ## Gnocchi Calorimetry

    # CRT Reconstruction
    crtreco: @local::TwoCRTMatching_producer
    crttag: @local::SingleCRTMatching_producer

    #photon detector reconstruction
    opdec:              @local::protodunehd_mc_deconvolution
    ophitspe:           @local::dune_ophit_finder_deco
    opflash:            @local::protodune_opflash
    opslicer:           @local::protodune_opslicer

    crtreco: @local::TwoCRTMatching_producer
    crttag: @local::SingleCRTMatching_producer

    ##Producers for forcing pandora to create track or shower objects
    ##for each PFParticle
    pandora2Track:         @local::dune_pandoraTrackCreation
    pandora2calo:          @local::pdhd_allTrack_calomcsce
    pandora2calonosce:     @local::pdhd_allTrack_calomcnosce
    pandora2Shower:        @local::dune_pandoraShowerCreation
    pandora2Showercalo:         @local::pdhd_allShower_calomcsce
    pandora2Showercalonosce:    @local::pdhd_allShower_calomcnosce

    pandoraGnocchicalo: @local::pdhd_gnocchi_calomc_nosce
    pandora2Gnocchicalo: @local::pdhd_gnocchi_calomc_nosce
    pandoraGnocchicalonosce: @local::pdhd_gnocchi_calomc_nosce
    pandora2Gnocchicalonosce: @local::pdhd_gnocchi_calomc_nosce
  }
  #define the producer and filter modules for this path, order matters,
#filters reject all following items.  see lines starting physics.producers below
reco: [ opdec,
        ophitspe,
        opflash,
        opslicer,
        wclsdatahd,
        gaushit,
        nhitsfilter,
        reco3d,
        hitpdune,
        pandora,
        pandoraWriter,
        pandoraTrack,
        pandoraShower,
        pandoracalo,
        pandoracalonosce,
        #pandorapid,
        pandoraShowercalo,
        pandoraShowercalonosce,
        pandoraGnocchicalo,
        pandoraGnocchicalonosce,
        emtrkmichelid,
        crttag,
        crtreco,
        pandora2Track,
        pandora2calo,
        pandora2calonosce,
        pandora2Gnocchicalo,
        pandora2Gnocchicalonosce,
        pandora2Shower,
        pandora2Showercalo,
        pandora2Showercalonosce
          ]
  #define the output stream, there could be more than one if using filters
  output:  [ out1 ]
  #trigger_paths is a keyword and contains the paths that modify the art::event,
  #ie filters and producers
  trigger_paths: [reco]
  #end_paths is a keyword and contains the paths that do not modify the art::Event,
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [output]
}
#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   outputCommands: [ "keep *",
                     "drop *_wclsdatasp_wiener_*", "drop *_reco3d_noreg_*",
                     "drop *_reco3d_pre_*" ]
   compressionLevel: 1 #zlib argument (0-9)
   fastCloning: true
   #basketSize: 8192 #[Byte] buffer size at 8k
   #splitLevel: 0 #reduces number of buffers
   #treeMaxVirtualSize: 1 #[Byte] limits number of buffers/branch to 1 (default is 10)
 }
}

physics.producers.gaushit.CalDataModuleLabel: "wclsdatahd:gauss"
physics.producers.pandora.HitFinderModuleLabel:             "hitpdune"
physics.producers.pandora.GeantModuleLabel:                 "tpcrawdecoder:simpleSC"
physics.producers.pandoraWriter.GeantModuleLabel:           "tpcrawdecoder:simpleSC"
physics.producers.pandoraWriter.HitFinderModuleLabel:       "hitpdune"
physics.producers.pandoraWriter.GeneratorModuleLabel:       "generator"
physics.producers.pandoraTrack.PFParticleLabel:             "pandora"
physics.producers.pandoraShower.PFParticleLabel:            "pandora"
physics.producers.pandorapid.CalorimetryModuleLabel:        "pandoracalo"
physics.producers.pandorapid.TrackModuleLabel:              "pandoraTrack"

##Optical detector configuration
physics.producers.opdec.InputModule: "opdigi"
physics.producers.opdec.InstanceName: ""
physics.producers.ophitspe.InputModuledigi: "opdigi" ##TODO check this
physics.producers.opflash.InputModule: "ophitspe"
physics.producers.opslicer.OpHitModuleLabel: "ophitspe"



#Forcing Pandora to create either all tracks or all showers on each PFParticle object
physics.producers.pandora2Track.PFParticleLabel:             "pandora"
physics.producers.pandora2Track.UseAllParticles:             true
####The above line forces pandora to fit a track to all PFParticles
physics.producers.pandora2Shower.PFParticleLabel:            "pandora"
physics.producers.pandora2Shower.UseAllParticles:            true

#physics.producers.pandora2Showercalo.ShowerTag: "pandora2Shower"
#physics.producers.pandora2Showercalonosce.ShowerTag: "pandora2Shower"
#physics.producers.pandora2calo.TrackModuleLabel: "pandora2Track"
#physics.producers.pandora2calonosce.TrackModuleLabel: "pandora2Track"
#
#physics.producers.pandora2Gnocchicalo.TrackModuleLabel:                "pandora2Track"
#physics.producers.pandora2Gnocchicalo.AssocHitModuleLabel:             "pandora2Track"
#physics.producers.pandora2Gnocchicalonosce.TrackModuleLabel:                "pandora2Track"
#physics.producers.pandora2Gnocchicalonosce.AssocHitModuleLabel:             "pandora2Track"
