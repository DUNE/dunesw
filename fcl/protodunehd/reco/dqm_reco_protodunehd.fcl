#include "HDF5RawInput2.fcl"
#include "DAPHNEReaderPDHD.fcl"
#include "PDHDTPCReader.fcl"
#include "pdhd_channel_map_services.fcl"

#include "services_refactored_pdune.fcl"
#include "caldata_dune.fcl"
#include "wirecell_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "SpacePointSolver_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_pdune.fcl"
#include "calibration_dune.fcl"
#include "featurelabelingmodules.fcl"
#include "particleid.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "Deconvolution.fcl"
#include "OpHitFinderDeco.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"
#include "ProtoDUNETriggerFilter.fcl"
#include "OpSlicer.fcl"
#include "CRT.fcl"
#include "T0RecoAnodePiercers.fcl"
#include "numberofhitsfilter.fcl"
#include "protodune_tools_dune.fcl"
#include "tools_dune.fcl"

process_name: Reco

tools: {}

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_protodunehd_hist.root" }
  TimeTracker:       @local::dune_time_tracker
  MemoryTracker:     @local::dune_memory_tracker
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod
  #FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::protodunehd_reco_services
#  ChannelStatusService: @local::pdsp_channel_status
  IFDH: {}
  HDF5RawFile2Service:  {}
  PD2HDChannelMapService: {
     FileName: "PD2HDChannelMap_v4.txt"
  }
  DAPHNEChannelMapService: @local::pdhd_daphne_channel_map_service
}

#BackTracker Module labels
source: @local::hdf5rawinput2

physics: {

  filters: { ##Need these?
    #trigfilter:  @local::pdsp_trigfilter_all
    #nhitsfilter: @local::standard_numberofhitsfilter
  }

  producers: {

    # Raw Decoders
    tpcrawdecoder: @local::PDHDTPCReaderDefaults
    pdhddaphne: @local::DAPHNEReaderPDHD

    # TPC wire signals
    caldata:            @local::producer_adcprep_notool
    # WireCell
    #wclsdatahd:         @local::protodunehddata_wctsp
    wclsdatahd:         @local::protodunehd_nfsp
    # Hit finder
    gaushit:            @local::protodunespmc_gaushitfinder
    # space point solver
    reco3d:             @local::protodunespmc_spacepointsolver
    # actual disambiguation
    hitpdune:           @local::pdune_disambigfromsp
    # reconstruction using disambiguated hits
    pandora:            @local::protodunehd_pandora
    pandoraTrack:       @local::dune_pandoraTrackCreation
    pandoraShower:      @local::dune_pandoraShowerCreation
    #photon detector reconstruction
    opdec:              @local::protodunehd_deconvolution
    ophitspe:           @local::dune_ophit_finder_deco
    opflash:            @local::protodune_opflash
    opslicer:           @local::protodune_opslicer

    #CRT
    crtreco: @local::TwoCRTMatching_producer
    crttag: @local::SingleCRTMatching_producer
  }
  #define the producer and filter modules for this path, order matters,
  #filters reject all following items.  see lines starting physics.producers below
  reco: [
        tpcrawdecoder,
        pdhddaphne,
        #opdec,
        #ophitspe,
        #opflash,
        #opslicer
        #caldata,
        wclsdatahd,
        gaushit,
        #nhitsfilter,
        reco3d,
        hitpdune,
        pandora,
        pandoraTrack,
        pandoraShower
        #pandoracalo,
        #pandoracalonosce,
        #crttag,
        #crtreco
  ]
  #define the output stream, there could be more than one if using filters
  stream1:  [ out1 ]
  #trigger_paths is a keyword and contains the paths that modify the art::event,
  #ie filters and producers
  trigger_paths: [reco]
  #end_paths is a keyword and contains the paths that do not modify the art::Event,
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [stream1]
}
#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   outputCommands: [ "keep *"] #, "drop recob::Wires_caldata_dataprep_*",
                     #"drop *_wclsdatasp_wiener_*", "drop *_reco3d_noreg_*",
                     #"drop *_reco3d_pre_*" ]
   compressionLevel: 1 #zlib argument (0-9)
   fastCloning: true
   #basketSize: 8192 #[Byte] buffer size at 8k
   #splitLevel: 0 #reduces number of buffers
   #treeMaxVirtualSize: 1 #[Byte] limits number of buffers/branch to 1 (default is 10)
 }
}
#physics.producers.caldata.DigitLabel: "tpcrawdecoder:daq"
#physics.producers.caldata.WireName: "dataprep"
#physics.producers.caldata.LogLevel: 3
#physics.producers.caldata.OnlineChannelMapTool: ""
#
physics.producers.gaushit.CalDataModuleLabel: "wclsdatahd:gauss"
#physics.producers.emtrkmichelid.WireLabel: "wclsdatahd:gauss"
physics.producers.pandora.HitFinderModuleLabel:             "hitpdune"
#physics.producers.pandora.GeantModuleLabel:                 "tpcrawdecoder:simpleSC"
#physics.producers.pandoraWriter.GeantModuleLabel:           "tpcrawdecoder:simpleSC"
#physics.producers.pandoraWriter.HitFinderModuleLabel:       "hitpdune"
#physics.producers.pandoraWriter.GeneratorModuleLabel:       "generator"
physics.producers.pandoraTrack.PFParticleLabel:             "pandora"
physics.producers.pandoraShower.PFParticleLabel:            "pandora"
#physics.producers.pandorapid.CalorimetryModuleLabel:        "pandoracalo"
#physics.producers.pandorapid.TrackModuleLabel:              "pandoraTrack"
#physics.producers.pandoracalipid.CalorimetryModuleLabel:        "pandoracali"
#physics.producers.pandoracalipid.TrackModuleLabel:              "pandoraTrack"
#
##Optical detector configuration
physics.producers.opdec.InputModule:                        "pdhddaphne:daq"
#physics.producers.ophit.InputModule:                        "pdhddaphne"
physics.producers.ophitspe.InputModuledigi:                 "pdhddaphne:daq"
physics.producers.opflash.InputModule:                      "ophitspe"
physics.producers.opslicer.OpHitModuleLabel:                "ophitspe"
#
## Use channel map service for data
##services.PdspChannelMapService:        @local::pdspchannelmap
#services.ExptGeoHelperInterface.ChannelMapClass: "DuneApaChannelMapAlg"
