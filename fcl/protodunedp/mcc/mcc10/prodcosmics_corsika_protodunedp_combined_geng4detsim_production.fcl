#include "services_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "photpropservices_dune.fcl"
#include "CORSIKAGendp.fcl"
#include "tools_dune.fcl"


process_name: CosmicsDP

services: @local::protodunedphase_simulation_services_legacy

#Load the service that manages root files for histograms.
services.TFileService: 			{ fileName: "cosmics_corsika_rotation_hist.root" }
services.TimeTracker:  			{}
services.RandomNumberGenerator: 	{} #ART native random number generator
services.FileCatalogMetadata:  		@local::art_file_catalog_mc
services.NuRandomService:       	@local::random_NuRandomService  # seedservice.fcl
services.AuxDetGeometry: @local::protodunedphase_auxdet_geo
services.Geometry: 			@local::protodunedphase_geo
services.DetectorPropertiesService: 	@local::protodunedphase_detproperties

#we activate light simulation
services.LArG4Parameters.UseCustomPhysics: true
services.LArG4Parameters.EnabledPhysics: [ "Em",
                                           "FastOptical",
                                           "SynchrotronAndGN",
                                           "Ion",
                                           "Hadron",
                                           "Decay",
                                           "HadronElastic",
                                           "Stopping"]


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   100         # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   rns:       		{ module_type: "RandomNumberSaver" }
   generator:           @local::standard_CORSIKAGendp_CMC
   largeant:            @local::dunefd_largeant
   daq:                 @local::dune_detsim
 }

 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns,
            generator,
            largeant,
            daq
            ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [simulate]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a 
SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "cosmics_protodunedp.root" #default file name, can override from command line with -o or --output
   dataTier:    "cosmic-detsim"
   compressionLevel: 1
 }
}

#specific to cosmic sim
physics.producers.generator.DoRotation:          true
physics.producers.generator.SampleTime:          8e-3
physics.producers.generator.TimeOffset:          -4e-3 #4.0 ms readout should start at -0.875 ms to match data
physics.producers.generator.BufferBox:           [ -300.0, 300.0, -300.0, 300.0, -300.0, 300.0 ]   #in cm
physics.producers.generator.ShowerAreaExtension: 2000
physics.producers.generator.RandomXZShift:       2000     #amount to randomly shift shower start point in x & z [cm] (default is 1000)
physics.producers.generator.ProjectToHeight:     856  #height to which particles are projected in cm
physics.producers.generator.ShowerInputFiles:     [
                                                    "/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/p_showers_*",
                                                   "/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard/He_showers_*",
                                                   "/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard//N_showers_*",
                                                   "/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard//Mg_showers_*",
                                                   "/cvmfs/dune.osgstorage.org/pnfs/fnal.gov/usr/dune/persistent/stash/Cosmics/CERN/CORSIKA/standard//Fe_showers_*"
                                               ] #list of sqlite dbs with corsika showers



services.DetectorPropertiesService.Electronlifetime:  3000.0         #in us

services.LArG4Parameters.MinNumberOfElCluster: 20

services.PhotonVisibilityService: @local::protodunedp_photonvisibilityservice
services.PhotonVisibilityService.Interpolate: true

# DetSim flags.
physics.producers.daq.NoiseOn:           true
physics.producers.daq.PedestalOn:        true
physics.producers.daq.DistortOn:         false
physics.producers.daq.SuppressOn:        false #false when noise on!
physics.producers.daq.KeepEmptyChannels: true

# DetSim services.
services.ChannelNoiseService:            @local::chnoiseold
services.PedestalAdditionService:        @local::padprovided

services.DetPedestalService: @local::dunedp_fixedpeds
services.DetPedestalService.FixedDetPedestal.PedMeanErrY: 0
services.DetPedestalService.FixedDetPedestal.PedMeanErrZ: 0
services.DetPedestalService.FixedDetPedestal.PedMeanY: 60
services.DetPedestalService.FixedDetPedestal.PedMeanZ: 60
services.DetPedestalService.FixedDetPedestal.PedRmsErrY: 0
services.DetPedestalService.FixedDetPedestal.PedRmsErrZ: 0
services.DetPedestalService.FixedDetPedestal.PedRmsY: 0
services.DetPedestalService.FixedDetPedestal.PedRmsZ: 0

services.AdcDistortService:              @local::stuckbits
services.AdcSuppressService:             @local::zsonline
services.AdcCompressService:             @local::cmpreplace


#===================New noise module ===========================================
#Configure realistic noise service for DP detectors based on the 311 data
#NB: Hardcoded unrotated geometry:

services.ChannelNoiseService:{
service_provider: DPhaseRealisticNoiseService
NoiseModel:    "729-0_fft_mirror.root"    #path to the noise model root file
RandomizeX:    15. #0.002
RandomizeY:    15. #0.002
Smooth:        1000
SetFirst0:     false
SetBaseline:   false   #if true sum baseline to real noise model
NoiseArrayPoints: 1000
OldNoiseIndex: false   #From ExponentialChannelNoiseService. Keep false
}
