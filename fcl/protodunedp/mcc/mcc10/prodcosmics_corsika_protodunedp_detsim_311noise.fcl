#include "services_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "tools_dune.fcl"


process_name: Detsim

services: @local::protodunedphase_simulation_services_legacy
services.TFileService: { fileName: "cosmics_corsika_rotation_hist.root" }
services.TimeTracker:  {}
services.MemoryTracker:         {} # default is one
services.RandomNumberGenerator: {} #ART native random number generator
services.FileCatalogMetadata:  @local::art_file_catalog_mc
services.NuRandomService:       @local::random_NuRandomService  # seedservice.fcl
services.AuxDetGeometry: @local::protodunedphase_auxdet_geo
services.Geometry: @local::protodunedphase_geo
services.DetectorPropertiesService: @local::protodunedphase_detproperties

#source is now a root file
source: {
    module_type: RootInput
    maxEvents:  100        # Number of events to create
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   rns:       { module_type: "RandomNumberSaver" }
   daq:                 @local::dune_detsim
 }

 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns,
            daq
            ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [simulate]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a 
SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_detsim.root"
   dataTier:    "detector-simulated"
   compressionLevel: 1
 }
}


# Use fixed values instead of DB for pedestals.
services.DetPedestalService: @local::dunedp_fixedpeds

# DetSim flags.
physics.producers.daq.NoiseOn:           true
physics.producers.daq.PedestalOn:        true
physics.producers.daq.DistortOn:         false
physics.producers.daq.SuppressOn:        false #false when noise on!
physics.producers.daq.KeepEmptyChannels: true

# DetSim services.
services.ChannelNoiseService:            @local::chnoiseold
services.PedestalAdditionService:        @local::padprovided

services.DetPedestalService: @local::dunedp_fixedpeds
services.DetPedestalService.FixedDetPedestal.PedMeanErrY: 0
services.DetPedestalService.FixedDetPedestal.PedMeanErrZ: 0
services.DetPedestalService.FixedDetPedestal.PedMeanY: 60
services.DetPedestalService.FixedDetPedestal.PedMeanZ: 60
services.DetPedestalService.FixedDetPedestal.PedRmsErrY: 0
services.DetPedestalService.FixedDetPedestal.PedRmsErrZ: 0
services.DetPedestalService.FixedDetPedestal.PedRmsY: 0
services.DetPedestalService.FixedDetPedestal.PedRmsZ: 0

services.AdcDistortService:              @local::stuckbits
services.AdcSuppressService:             @local::zsonline
services.AdcCompressService:             @local::cmpreplace

#===================New noise module ===========================================
#Configure realistic noise service for DP detectors based on the 311 data
#NB: Hardcoded unrotated geometry:

services.ChannelNoiseService:{
service_provider: DPhaseRealisticNoiseService
NoiseModel:    "$MRB_SOURCE/dunetpc/dune/DetSim/NoiseModels/729-0_fft_mirror.root"    #path to the noise model root file
RandomizeX:    15. #0.002
RandomizeY:    15. #0.002
Smooth:        1000
SetFirst0:     false
SetBaseline:   false   #if true sum baseline to real noise model
NoiseArrayPoints: 1000
OldNoiseIndex: false   #From ExponentialChannelNoiseService. Keep false
}
