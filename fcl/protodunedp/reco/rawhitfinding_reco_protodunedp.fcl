#include "services_dune.fcl"
#include "caldata_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_dune10kt.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "particleid.fcl"
#include "showerfindermodules_dune.fcl"

#include "tools_dune.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "hist.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefddphase_reco_services_legacy
}

services.AuxDetGeometry: @local::protodunedphase_auxdet_geo
services.Geometry: @local::protodunedphase_geo
services.DetectorPropertiesService: @local::protodunedphase_detproperties
services.DetectorPropertiesService.Electronlifetime:  1000.0e3         #in us

services.RawDigitPrepService.DoDeconvolution: false

# services.message.destinations.LogStandardOut.threshold: "INFO"

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents: -1
  fileNames: ["detsim.root"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 {
# random number saver
  rns:                 { module_type: RandomNumberSaver }
# convert raw::RawDigit to recob::wire
  caldata:            @local::producer_adcprep
# actual hit finder and recconstruction
  dprawhit:	      @local::dunefddphase_dprawhitfinder
  fasthit:            @local::dunefd_fasthitfinder
  trajcluster:        @local::dunefdmc_trajcluster
  calo:               @local::dune10kt_calomc
  pandora:            @local::dunefd_pandora
  pmtrack:            @local::dunefd_pmalgtrackmaker
  pmtrajfit:	      @local::dunefd_pmalgtrajfitter
  pmtrackcalo:        @local::dune10kt_calomc
  pmtrackpid:         @local::standard_chi2pid
  blurredcluster:     @local::dune10kt_blurredcluster
  emshower:           @local::dune10kt_emshower
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns, caldata, fasthit, dprawhit, trajcluster, pmtrack, pmtrackcalo, pmtrackpid, blurredcluster, emshower ]



	analyzers:
	{
	}
	 
	analyzeIt:  [ ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
 }
}
### Here, we overwrite ALL module labels with the ones defined above.

physics.producers.caldata.DoGroups: false

### Hit finding parameters ###
services.AdcRoiBuildingService.NSigmaStart: 	  1.25  # only pulses with ADC >= NSigmaStart*8 are considered for hit finding. Should correspond to MinSig.
services.AdcRoiBuildingService.NSigmaEnd:  	  1.25	# only pulses with ADC >= NSigmaStart*8 are considered for hit finding. Should correspond to MinSig.

physics.producers.dprawhit.MinSig:       	  10	# threshold for raw hit fitting algorithm in ADC. No peak with lower amplitude is fitted.
physics.producers.dprawhit.TicksToStopPeakFinder: 4	# when walking along waveform to find start and end points of a peak, stop when current tick is followed by minimum "TicksToStopPeakFinder" ticks
							# with equal or higher ADC counts (stop anyway if ADC count of a tick is <= 0)
physics.producers.dprawhit.MinWidth:     	  10    # threshold for single pulses in ticks (= 400 ns), reduces noise hits
physics.producers.dprawhit.MinADCSumOverWidth:    4.8   # threshold for ADC sum over width (ADC per ticks). Peaks with smaller values are neither fitted nor stored.
physics.producers.dprawhit.MaxMultiHit:	 	  6
physics.producers.dprawhit.TryNplus1Fits:         true	# true: will try to re-fit poorly modeled hits (chi2PerNDF>Chi2NDFRetry) with n+1 exponentials
 						  	# false will NOT try to re-fit poorly modled hits
physics.producers.dprawhit.Chi2NDFRetry: 	  25	# fits with chi2/ndf above this value will be refitted with an additional peak (if TryNplus1Fits is set to true)
physics.producers.dprawhit.MinTau:		  0.01	# mainimum value of the rising and falling time constants of the fit, in ticks. Sets a minimum width for the fit (~ width the elec.shaping function)
physics.producers.dprawhit.MaxTau:		  5	# maximum value of the rising and falling time constants of the fit, in ticks. Limits the max. width of the fit (depends on drift distance etc.)
physics.producers.dprawhit.GroupMaxDistance:	  5	# max distance between two peaks for grouping. grouped hits are fitted together.
physics.producers.dprawhit.DoMergePeaks:	  true	# true: peak merging (merge two peaks into one) before fitting enabled
physics.producers.dprawhit.MergeADCSumThreshold:  0.2	# merge two peaks only if (ADC sum of the smaller peak) < MergeADCSumThreshold*(ADC sum of the bigger peak)
physics.producers.dprawhit.MergeMaxADCThreshold:  0.2	# merge two peaks only if (height of the smaller peak) < MergeADCSumThreshold*(height sum of the bigger peak)


#PMAlg configuration

physics.producers.trajcluster.TrajClusterAlg.HitFinderModuleLabel:	"dprawhit"
physics.producers.trajcluster.TrajClusterAlg.HitErrFac: 		0.2
physics.producers.trajcluster.TrajClusterAlg.MakeNewHits: 		false

physics.producers.pmtrackcalo.TrackModuleLabel:         "pmtrack"
physics.producers.pmtrackcalo.SpacePointModuleLabel:    "pmtrack"
physics.producers.pmtrackcalo.T0ModuleLabel:            ""
physics.producers.pmtrackcalo.CaloAlg.CalAreaConstants: [ 4.966e-2, 4.966e-2 ]
physics.producers.pmtrackpid.CalorimetryModuleLabel:  "pmtrackcalo"
physics.producers.pmtrackpid.TrackModuleLabel:        "pmtrack"

physics.producers.pmtrack.HitModuleLabel:             "trajcluster"
physics.producers.pmtrack.ClusterModuleLabel:         "trajcluster"

physics.producers.pmtrajfit.HitModuleLabel:           "trajcluster"
physics.producers.pmtrajfit.PfpModuleLabel:           "pandora"

physics.producers.blurredcluster.HitsModuleLabel: "trajcluster"
physics.producers.blurredcluster.TrackModuleLabel: "pmtrack"
physics.producers.blurredcluster.CreateDebugPDF:  false
physics.producers.blurredcluster.MergeClusters:   false
physics.producers.blurredcluster.GlobalTPCRecon:  true
physics.producers.blurredcluster.ShowerReconOnly: false
physics.producers.blurredcluster.VertexModuleLabel: "trajcluster"

physics.producers.emshower.ClusterModuleLabel: "blurredcluster"
physics.producers.emshower.HitsModuleLabel: "trajcluster"
physics.producers.emshower.TrackModuleLabel: "pmtrack"


#Pandora configurations

#Optical detector configuration

