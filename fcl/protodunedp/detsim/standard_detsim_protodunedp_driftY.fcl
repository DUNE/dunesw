#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "tools_dune.fcl"

process_name: Detsim

services: @local::dunefddphase_simulation_services_legacy
services.TFileService: { fileName: "detsim_hist.root" }
services.TimeTracker:       {}
services.MemoryTracker:         {} # default is one
services.RandomNumberGenerator: {} #ART native random number generator
services.FileCatalogMetadata:  @local::art_file_catalog_mc
services.NuRandomService:       @local::random_NuRandomService  # seedservice.fcl

services.AuxDetGeometry: @local::protodunedphase_driftY_auxdet_geo
services.Geometry: @local::protodunedphase_driftY_geo
services.DetectorPropertiesService: @local::protodunedphase_detproperties

#source is now a root file
source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
 producers: {
   daq:            @local::dune_detsim
   rns:            { module_type: "RandomNumberSaver" }
 }
 simulate: [ rns, daq ]
 stream1:  [ out1 ]
 trigger_paths: [simulate] 
 end_paths:     [stream1]  
}

outputs: {
 out1: {
   module_type: RootOutput
   fileName:    "%ifb_detsim.root"
   dataTier:    "detector-simulated"
   compressionLevel: 1
 }
}

# Use fixed values instead of DB for pedestals.
#services.DetPedestalService: @local::dune_fixedpeds
services.DetPedestalService: @local::dunedp_fixedpeds

# DetSim flags.
physics.producers.daq.NoiseOn:     false
physics.producers.daq.PedestalOn:  true
physics.producers.daq.DistortOn:   false
physics.producers.daq.SuppressOn:  true  #false when noise on!

# DetSim services.
#services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
#services.AdcSuppressService:       @local::zslegacy
services.AdcSuppressService:       @local::zsonline
#services.AdcCompressService:       @local::cmpblock
services.AdcCompressService:       @local::cmpreplace

# Disable bad channels.
#services.IChannelStatusService.BadChannels: [ ]
