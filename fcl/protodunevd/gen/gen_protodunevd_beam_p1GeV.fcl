#include "services_dune.fcl"
#include "services_refactored_pdune.fcl"
#include "singles_dune.fcl"
#include "corsika_protodune.fcl"
#include "protodunebeam.fcl"
#include "dune_radiological_model.fcl"
#include "dune_radiological_model_decay0.fcl"


process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "gensingle_protoDUNEDP_hist.root" }
  TimeTracker:       @local::dune_time_tracker
  MemoryTracker:     @local::dune_memory_tracker
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::protodunevd_refactored_simulation_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::protodunedp_triggeredbeam
   #cosmicgenerator: @local::protodune_corsika_cmc
   ar39:             @local::dune10kt_39Ar_in_LAr
   kr85:             @local::dune10kt_85Kr_in_LAr
   ar42:             @local::dune10kt_42Ar_in_LAr
   k42fromar42:      @local::dune10kt_42Kfrom42Ar_in_LAr
 }


 #define the producer and filter modules for this path, order matters, 
 #simulate: [ generator, cosmicgenerator, ar39, ar42, kr85, k42fromar42 ]
 simulate: [ generator ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "gensingle_protoDUNEDP.root" #default file name, can override from command line with -o or --output
   dataTier: "generated"
   compressionLevel: 1
 }
}

#Set generator parameters
#Corresponds to beam window at center of left TPC

# Specific to the GEANT H4 Beam simulation by Nikos and paths at CERN
physics.producers.generator.GoodParticleTreeName: "NTuples/GoodParticle"
physics.producers.generator.AllParticlesTreeName: "Detector/NP02front" # Background particles should fire from here
physics.producers.generator.FileName: "/dune/data/users/calcuttj/H2_v27c_1GeV_1M_1.root"
physics.producers.generator.StartEvent: 0


## This block controls the datadriven primary generator. 
physics.producers.generator.UseDataDrivenPrimary: false 

## Specific .fcl for the +1 GeV/c momentum setting
services.TFileService.fileName: "gen_protoDuneDP_beam_p1GeV_cosmics_hist.root"
source.maxEvents: 10
outputs.out1.fileName: "gen_protoDuneDP_beam_p1GeV_cosmics.root"

