## same as protoDUNE_refactored_reco_stage1.fcl, no sce; no lifetime correction; no yz, x, t correction; *calinoxyzt<->*cali; *calipidnoxyzt<->*calipid
## this fcl is currently kept; we use two stage recos once we have calibration done: protoDUNE_refactored_reco_stage1.fcl and protoDUNE_refactored_reco_stage2.fcl

##include "services_dune.fcl"
#include "services_refactored_pdune.fcl"
#include "caldata_dune.fcl"
#include "wirecell_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "SpacePointSolver_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_pdune.fcl"
#include "calibration_dune.fcl"
#include "featurelabelingmodules.fcl"
#include "particleid.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"
#include "ProtoDUNETriggerFilter.fcl"
#include "OpSlicer.fcl"
#include "CRT.fcl"
#include "T0RecoAnodePiercers.fcl"
#include "numberofhitsfilter.fcl"
#include "protodune_tools_dune.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "reco_protoDUNE_hist.root" }
  TimeTracker:       @local::dune_time_tracker
  MemoryTracker:     @local::dune_memory_tracker
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::protodune_reco_services
#  ChannelStatusService: @local::pdsp_channel_status
  IFDH: {}
}

services.Geometry.SortingParameters.ChannelsPerOpDet: 12
services.Geometry.GDML: "protodune_v7.gdml"
services.AuxDetGeometry.GDML: @local::services.Geometry.GDML

#BackTracker Module labels
services.BackTrackerService.BackTracker.G4ModuleLabel: "largeant"
services.BackTrackerService.BackTracker.SimChannelModuleLabel: "tpcrawdecoder:simpleSC"
services.DetectorPropertiesService:    @local::protodunesp_detproperties
services.DetectorPropertiesService.GetHVDriftfromSamweb:           false
services.DetectorPropertiesService.GetReadOutWindowSizefromSamweb: false
services.DetectorPropertiesService.UseRunDependentTemperature:     false

services.RawDigitPrepService.ToolNames: @local::pdsim_dataprep_tools_wirecell

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents: -1
  saveMemoryObjectThreshold: 0
  fileNames: ["detsim_single_protoDUNE.root"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {

  filters: {
    trigfilter:  @local::pdsp_trigfilter_all
    nhitsfilter: @local::standard_numberofhitsfilter
  }

  producers: {
    # TPC wire signals
    caldata:            @local::producer_adcprep_notool          
    # WireCell 
    wclsdatasp:         @local::protodunespdata_wctsp
    # Hit finder
    gaushit:            @local::protodunespmc_gaushitfinder
    # space point solver
    reco3d:             @local::protodunespmc_spacepointsolver
    # actual disambiguation
    hitpdune:           @local::pdune_disambigfromsp
    # event feature labeling
    emtrkmichelid:      @local::protodune_emtrkmichelid
    # reconstruction using disambiguated hits
    pandora:            @local::protodune_pandora
    pandoraWriter:      @local::dune_pandorawriter
    pandoraTrack:       @local::dune_pandoraTrackCreation
    pandoraShower:      @local::dune_pandoraShowerCreation
    pandoracalo:        @local::pdune_sp_calomcnosce
    pandoracalonosce:   @local::pdune_sp_calomcnosce
    pandorapid:         @local::standard_chi2pid
    pandoracali:        @local::protodunespmcnosce_calibrationdedx
    pandoracalipid:     @local::standard_chi2pid
    pandoraShowercalo:  @local::pdune_sp_showercalomcnosce
    pandoraShowercalonosce:  @local::pdune_sp_showercalomcnosce
#   photon detector reconstruction
    ophit:              @local::protodune_ophit
    opflash:            @local::protodune_opflash
    opslicer:           @local::protodune_opslicer
    crtreco: @local::TwoCRTMatching_producer
    crttag: @local::SingleCRTMatching_producer
#	Anode piercing tracks t0 reconstruction
    anodepiercerst0:	@local::T0RecoAnodePiercers

    ##Producers for forcing pandora to create track or shower objects
    ##for each PFParticle
    pandora2Track:         @local::dune_pandoraTrackCreation
    pandora2calo:          @local::pdune_sp_alltrackcalomcnosce
    pandora2calonosce:     @local::pdune_sp_alltrackcalomcnosce
    pandora2pid:           @local::standard_chi2pid
    pandora2cali:          @local::protodunespmcnosce_calibrationdedx
    pandora2calipid:       @local::standard_chi2pid

    pandora2Shower:        @local::dune_pandoraShowerCreation
    pandora2Showercalo:    @local::pdune_sp_allshowercalomcnosce
    pandora2Showercalonosce:    @local::pdune_sp_allshowercalomcnosce

  }


  #define the producer and filter modules for this path, order matters,
#filters reject all following items.  see lines starting physics.producers below
reco: [ ophit,
        opflash,
        opslicer,
        caldata,
        wclsdatasp,
        gaushit,
        nhitsfilter,
        reco3d,
        hitpdune,
        pandora,
        pandoraWriter,
        pandoraTrack,
        pandoraShower,
        pandoracalo,
        pandoracalonosce,
        pandorapid,
        pandoraShowercalo,
        pandoraShowercalonosce,
        pandoracali,
        pandoracalipid,
        emtrkmichelid,
        crttag,
        crtreco,
        anodepiercerst0,
        pandora2Track,
        pandora2calo,
        pandora2calonosce,
        pandora2pid,
        pandora2Shower,
        pandora2Showercalo,
        pandora2Showercalonosce,
        pandora2cali,
        pandora2calipid
          ]

  #define the output stream, there could be more than one if using filters
  stream1:  [ out1 ]

  #trigger_paths is a keyword and contains the paths that modify the art::event,
  #ie filters and producers
  trigger_paths: [reco]

  #end_paths is a keyword and contains the paths that do not modify the art::Event,
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   outputCommands: [ "keep *", "drop raw::RawDigit*_*_*_*", "drop recob::Wires_caldata_dataprep_*", "drop *_wclsdatasp_wiener_*", "drop *_reco3d_noreg_*", "drop *_reco3d_pre_*" ]
   #outputCommands: [ "keep *", "drop *_reco3d_noreg_*", "drop *_reco3d_pre_*" ]
   compressionLevel: 1 #zlib argument (0-9)
   fastCloning: true
   #basketSize: 8192 #[Byte] buffer size at 8k
   #splitLevel: 0 #reduces number of buffers
   #treeMaxVirtualSize: 1 #[Byte] limits number of buffers/branch to 1 (default is 10)
 }
}

physics.producers.caldata.DigitLabel: "tpcrawdecoder:daq" 
physics.producers.caldata.WireName: "dataprep" 

physics.producers.gaushit.CalDataModuleLabel: "wclsdatasp:gauss"

physics.producers.pandora.HitFinderModuleLabel:             "hitpdune"
physics.producers.pandora.GeantModuleLabel:                 "tpcrawdecoder:simpleSC"
physics.producers.pandoraWriter.GeantModuleLabel:           "tpcrawdecoder:simpleSC"
physics.producers.pandoraWriter.HitFinderModuleLabel:       "hitpdune"
physics.producers.pandoraWriter.GeneratorModuleLabel:       "generator"
physics.producers.pandoraTrack.PFParticleLabel:             "pandora"
physics.producers.pandoraShower.PFParticleLabel:            "pandora"

physics.producers.pandorapid.CalorimetryModuleLabel:        "pandoracalo"
physics.producers.pandorapid.TrackModuleLabel:              "pandoraTrack"

physics.producers.pandoracalipid.CalorimetryModuleLabel:        "pandoracali"
physics.producers.pandoracalipid.TrackModuleLabel:              "pandoraTrack"

##Optical detector configuration
physics.producers.ophit.InputModule:                        "opdigi"
physics.producers.opflash.InputModule:                      "ophit"
physics.producers.opslicer.OpHitModuleLabel:                "ophit"

# Use channel map service for data
services.PdspChannelMapService:        @local::pdspchannelmap

#Forcing Pandora to create either all tracks or all showers on each PFParticle object
physics.producers.pandora2Track.PFParticleLabel:             "pandora"
physics.producers.pandora2Track.UseAllParticles:             true
####The above line forces pandora to fit a track to all PFParticles

physics.producers.pandora2pid.CalorimetryModuleLabel:        "pandora2calo"
physics.producers.pandora2pid.TrackModuleLabel:              "pandora2Track"

physics.producers.pandora2cali.TrackModuleLabel:             "pandora2Track"
physics.producers.pandora2cali.CalorimetryModuleLabel:       "pandora2calo"
physics.producers.pandora2cali.ShowerModuleLabel:             "pandora2Shower"
physics.producers.pandora2cali.ShowerCalorimetryModuleLabel:       "pandora2Showercalo"

physics.producers.pandora2calipid.CalorimetryModuleLabel:    "pandora2cali"
physics.producers.pandora2calipid.TrackModuleLabel:          "pandora2Track"

physics.producers.pandora2Shower.PFParticleLabel:            "pandora"
physics.producers.pandora2Shower.UseAllParticles:            true
