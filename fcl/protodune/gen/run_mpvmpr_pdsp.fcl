#include "services_refactored_pdune.fcl"
#include "multipartvertex_dune.fcl"

process_name: MPVMPR

services:
{
	TFileService: { fileName: "hists_prodmpvmpr_pdsp_%p-%tc.root" }
  IFDH:                  {}
  TimeTracker:           {}
  MemoryTracker:         {} # default is one
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::standard_info

  @table::protodune_refactored_simulation_services

  NuRandomService:         @local::dune_prod_seedservice
}

source:
{
	module_type: EmptyEvent
	timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
	maxEvents: 10
	firstRun: 1
	firstEvent: 1
}

physics:
{

    producers:
    {
        rns:       { module_type: "RandomNumberSaver" }
        generator: @local::MultiPartVertex
        rain:      @local::MultiPartRain
        rain2:     @local::MultiPartRain2
    }

    simulate: [ rns, generator, rain, rain2 ]
    out_stream: [ out1 ]

    trigger_paths: [ simulate ]
    end_paths: [ out_stream ]
}

# block to define where the output goes.  if you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "prodmpvmpr_pdsp_%p-%tc.root" # default file name, can override from command line with -o or --output
    dataTier:    "generated"
    saveMemoryObjectThreshold: 0
  }
}

physics.producers.generator.TPCRange: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10],[0,11]]
physics.producers.rain.TPCRange: [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10],[0,11]]