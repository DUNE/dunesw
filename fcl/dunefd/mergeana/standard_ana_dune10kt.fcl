#include "services_dune.fcl"
#include "AnalysisTree.fcl"
#include "trackfindermodules.fcl"
#include "showerfindermodules.fcl"
#include "checkrecoenergy.fcl"
#include "FlashMatchAna.fcl"

process_name: Mergeana

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "ana_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {}
  MemoryTracker:         { } # default is one
  message:      @local::dune_message_services_prod
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_simulation_services
}
#services.PhotonVisibilityService:      @local::dune35t_photonvisibilityservice
#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 analyzers:
{
 analysistree:      @local::dune10kt_analysistree
# pmtrackeff:        @local::standard_neutrinotrackingeff
 pmtracktceff:      @local::standard_neutrinotrackingeff
 pandoraeff:        @local::standard_neutrinotrackingeff
# pmtrajfiteff:      @local::standard_neutrinotrackingeff
# pmtrajfittceff:    @local::standard_neutrinotrackingeff
 pandorashweff:     @local::standard_neutrinoshowereff
 emshowershweff:    @local::standard_neutrinoshowereff
 trajclustershweff: @local::standard_neutrinoshowereff
 runcheckereco:     @local::dunefd_checkrecoenergy
 flashmatchAna:     @local::standard_flashmatchana
}
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 ana:  [ analysistree, pmtracktceff, pandoraeff, pandorashweff, emshowershweff, trajclustershweff, runcheckereco, flashmatchAna ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1,ana]  
# end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_merged.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
 }
}

### Here, we overwrite ALL module Labels with the ones defined above.
physics.analyzers.pmtrackeff.TrackModuleLabel:       "pmtrack"
physics.analyzers.pmtracktceff.TrackModuleLabel:     "pmtracktc"
physics.analyzers.pandoraeff.TrackModuleLabel:       "pandoraTrack"
physics.analyzers.pmtrajfiteff.TrackModuleLabel:     "pmtrajfit"
physics.analyzers.pmtrajfittceff.TrackModuleLabel:   "pmtrajfittc"

physics.analyzers.pandorashweff.HitModuleLabel:      "linecluster"
physics.analyzers.pandorashweff.ShowerModuleLabel:   "pandoraShower"

physics.analyzers.emshowershweff.HitModuleLabel:     "linecluster"
physics.analyzers.emshowershweff.ShowerModuleLabel:  "emshower"
physics.analyzers.emshowershweff.CNNEMModuleLabel:   "emtrkmichelid:emtrkmichel"
physics.analyzers.flashmatchAna.OpHitModuleLabel:    "ophitspe"
