#include "services_dune.fcl"
#include "mvamodule.fcl"
#include "CAFMaker.fcl"
#include "CVNMapper.fcl"
#include "CVNEvaluator.fcl"
#include "RegCNNMapper.fcl"
#include "RegCNNEvaluator.fcl"
#include "energyreco.fcl"

process_name: Cafana2

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "caf_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {}
  MemoryTracker:         { } # default is one
  message:      @local::dune_message_services_prod
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_simulation_services
}

source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{
   mvaselectnue:   @local::dunefd_mvaselect
   mvaselectnumu:  @local::dunefd_mvaselect
   energyreconue:  @local::dunefd_nuenergyreco_pmtrack
   energyreconumu: @local::dunefd_nuenergyreco_pmtrack
   cvnmap: @local::standard_cvnmapper
   cvneval: @local::standard_cvnevaluator
   regcnnmap:      @local::standard_regcnnmapper
   regcnneval:     @local::standard_regcnnevaluator
 }

 analyzers:
{
 cafmaker:          @local::dunefd_cafmaker
}

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 prod: [mvaselectnue, energyreconue, mvaselectnumu, energyreconumu, cvnmap, cvneval, regcnnmap, regcnneval]
# caf:  [ cafmaker]
 trigger_paths: [prod] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
# end_paths:     [stream1, caf]  
 end_paths:     [stream1]  

}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_merged.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
 }
}

services.AuxDetGeometry: @local::dune10kt_1x2x6_refactored_auxdet_geo
services.Geometry: @local::dune10kt_1x2x6_refactored_geo

physics.producers.mvaselectnue.MVAMethod:  "BDTG"
physics.producers.mvaselectnumu.MVAMethod: "BDTG"

physics.producers.mvaselectnue.Select:  "nue"
physics.producers.mvaselectnumu.Select: "numu"

# 1 = longest reco track + hadronic, 2 = reco shower with highest charge + hadronic, 3 = all hit charges
physics.producers.energyreconue.RecoMethod:   2
physics.producers.energyreconumu.RecoMethod:  1

physics.producers.mvaselectnue.WeightFile:   "MVASelect/v2.2/TMVAClassification_BDTG.nue.weights.xml"
physics.producers.mvaselectnumu.WeightFile:  "MVASelect/v2.2/TMVAClassification_BDTG.numu.weights.xml"


physics.analyzers.cafmaker.MakeWeightTree:          false
physics.analyzers.cafmaker.Reweight:                false
physics.analyzers.cafmaker.MakeAnaTree:             false
physics.analyzers.cafmaker.MakeSystHist:            false

physics.analyzers.cafmaker.NuECut:                  0.8
physics.analyzers.cafmaker.NuMuCut:                 0.8

# Pull the reco  information from one of the MVA modules, choice is arbitary
physics.analyzers.cafmaker.MVASelectLabel: "mvaselectnue"

physics.producers.cvnmap.HitsModuleLabel: "hitfd"
physics.producers.cvnmap.TimeResolution: 1600
physics.producers.cvnmap.PlaneLength: 500
physics.producers.cvnmap.TdcWidth: 500

dune_tfile_metadata:
{
  JSONFileName:          "caf_hist.root.json"
  GenerateTFileMetadata: true
  dataTier:              "root-tuple"
  fileFormat:            "root"
}
