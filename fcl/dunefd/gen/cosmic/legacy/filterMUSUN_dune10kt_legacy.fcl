#include "services_dune.fcl"
#include "MUSUN.fcl"
	 
process_name: MUSUNFilter

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "MUSUN_filter_hist.root" }
  TimeTracker:       {}
  MemoryTracker:         { } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_simulation_services_legacy
AuxDetGeometry: @local::dune10kt_auxdet_geo
  Geometry:     @local::dune10kt_geo
}

source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 filters: {
   cosmicfilter: { module_type: "CosmicFilter" }
 }
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 fpath: [ cosmicfilter ]
 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [fpath] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "MUSUN_gen_dunefd_filtered.root"
   dataTier:    "generated"
   compressionLevel: 1
   SelectEvents: [fpath]
 }
}
